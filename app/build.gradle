apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'io.gitlab.arturbosch.detekt'

def keystorePropsFile = rootProject.file('keystore.properties')
def versionPropertiesFile = rootProject.file("version.properties")

tasks.register('bumpVersionCode') {
    doLast {
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def code = versionProperties['VERSION_CODE'].toInteger() + 1

        versionProperties['VERSION_CODE'] = code.toString()
        versionProperties.store(versionPropertiesFile.newWriter(), null)
    }
}

android {
    if (keystorePropsFile.exists()) {
        def keystoreProps = new Properties()
        keystoreProps.load(new FileInputStream(keystorePropsFile))
        signingConfigs {
            release {
                storeFile file(keystoreProps['storeFile'])
                storePassword keystoreProps['storePassword']
                keyAlias keystoreProps['keyAlias']
                keyPassword keystoreProps['keyPassword']
            }
        }
    }
    def versionProperties = new Properties()
    if (versionPropertiesFile.exists()) {
        versionProperties.load(new FileInputStream(versionPropertiesFile))
    }

    def date = new Date()
    def verName = date.format('yy.M.d')

    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.minirogue.starwarscanontracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionProperties['VERSION_CODE'].toInteger()
        versionName verName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
        }
    }
    compileOptions {
        sourceCompatibility = rootProject.ext.javaCompatibilityVersion
        targetCompatibility = rootProject.ext.javaCompatibilityVersion
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.javaCompatibilityVersion
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'com.minirogue.starwarscanontracker'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Project Modules
    implementation libs.android.material
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintLayout
    implementation libs.androidx.fragment
    implementation libs.androidx.preference
    implementation libs.coil
    implementation libs.fastScroll
    implementation libs.hilt.android
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    implementation libs.lifecycle.livedata // TODO deprecate
    implementation libs.lifecycle.viewmodel // TODO deprecate
    implementation libs.lifecycle.common// TODO deprecate
    implementation libs.room.ktx
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation projects.core
    implementation projects.feature.homeScreen.internal
    implementation projects.feature.mediaItem.internal
    implementation projects.feature.mediaList.internal
    implementation projects.feature.series.internal
    implementation projects.feature.settings.internal
    implementation projects.feature.selectFilters.internal
    implementation projects.library.commonResources.public
    implementation projects.library.filters.internal
    implementation projects.library.holoclient.internal
    implementation projects.library.mediaNotes.internal
    implementation projects.library.series.internal
    implementation projects.library.settings.internal
    implementation projects.library.coroutineExt.public
    implementation projects.library.viewExt.public

    kapt libs.hilt.compiler

    // detekt
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
}
