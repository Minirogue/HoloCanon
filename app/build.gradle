apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'io.gitlab.arturbosch.detekt'

def keystorePropsFile = rootProject.file('keystore.properties')
def versionPropertiesFile = rootProject.file("version.properties")

task bumpVersionCode {
    doLast {
        def versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionPropertiesFile))

        def code = versionProperties['VERSION_CODE'].toInteger() + 1

        versionProperties['VERSION_CODE'] = code.toString()
        versionProperties.store(versionPropertiesFile.newWriter(), null)
    }
}

android {
    if (keystorePropsFile.exists()) {
        def keystoreProps = new Properties()
        keystoreProps.load(new FileInputStream(keystorePropsFile))
        signingConfigs {
            release {
                storeFile file(keystoreProps['storeFile'])
                storePassword keystoreProps['storePassword']
                keyAlias keystoreProps['keyAlias']
                keyPassword keystoreProps['keyPassword']
            }
        }
    }
    def versionProperties = new Properties()
    if (versionPropertiesFile.exists()) {
        versionProperties.load(new FileInputStream(versionPropertiesFile))
    }

    def date = new Date()
    def verName = date.format('yy.M.d')

    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.minirogue.starwarscanontracker"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionProperties['VERSION_CODE'].toInteger()
        versionName verName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
        }
    }
    compileOptions {
        sourceCompatibility = rootProject.ext.javaCompatibilityVersion
        targetCompatibility = rootProject.ext.javaCompatibilityVersion
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.javaCompatibilityVersion
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Project Modules
    implementation project(":core")
    implementation project(":usecase")
    implementation project(":library:filters:internal")
    implementation project(":library:holoclient:internal")

    // Android
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "com.google.android.material:material:1.8.0"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Fastscroll: https://github.com/zhanghai/AndroidFastScroll
    implementation "me.zhanghai.android.fastscroll:library:1.2.0"

    // Testing
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "junit:junit:$jUnitVersion"
    testImplementation "junit:junit:$jUnitVersion"
    androidTestImplementation "androidx.test:core:$androidXTestVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestVersion"
    androidTestImplementation "androidx.test:runner:$androidXTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // lifecycle components
    implementation "androidx.fragment:fragment-ktx:1.5.7" //for lazy viewmodel instantiation
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion" // TODO deprecate
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"

    // detekt
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"

    // Image loading (image loading)
    implementation "io.coil-kt:coil:$coilVersion"
}
