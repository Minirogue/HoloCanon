<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$( onDismissRequest = {
      viewModel.dismissNameChangeDialog() }, confirmButton = { TextButton(onClick = {
      viewModel.setCheckboxName(whichBox, newName) }) { Text(text =
      getString(R.string.settings_save)) } }, dismissButton = { TextButton(onClick = {
      viewModel.dismissNameChangeDialog() }) { Text(text = getString(R.string.settings_cancel)) } },
      title = { Text(text = getString(R.string.settings_filter_name_change_text,
      whichBox.toString())) }, text = { OutlinedTextField(value = newName, onValueChange = { newName
      = it }, label = { Text(getString(R.string.settings_new_name)) }) })
    </ID>
    <ID>
      ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(getString(R.string.settings_included_media_types),
      style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(8.dp))
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(modifier = Modifier
      .fillMaxWidth() .clickable { viewModel.showNameChangeDialog(whichBox) }, horizontalArrangement
      = Arrangement.SpaceBetween, verticalAlignment = Alignment.CenterVertically)
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(modifier = Modifier
      .padding(8.dp) .clickable { viewModel.setCheckboxActive(whichBox, !checkboxSetting.isInUse) },
      checked = checkboxSetting.isInUse, onCheckedChange = null)
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(modifier = Modifier
      .padding(8.dp) .clickable { viewModel.toggleWifiSetting(!wifiOnly) }, checked = wifiOnly,
      onCheckedChange = null )
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(modifier = Modifier
      .padding(8.dp) .fillMaxWidth())
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(text = checkboxSetting.name ?:
      "Error getting name", modifier = Modifier.padding(8.dp))
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(text =
      getString(R.string.settings_user_defined_filter, whichBox.toString()), style =
      MaterialTheme.typography.titleMedium, modifier = Modifier.padding(8.dp))
    </ID>
    <ID>ArgumentListWrapping:SettingsFragment.kt$SettingsFragment$(value = newName, onValueChange =
      { newName = it }, label = { Text(getString(R.string.settings_new_name)) })
    </ID>
    <ID>ArgumentListWrapping:SettingsViewModel.kt$SettingsViewModel$(checkboxSettings =
      newCheckboxSettings)
    </ID>
    <ID>ArgumentListWrapping:SettingsViewModel.kt$SettingsViewModel$(permanentFilters =
      newPermFilters)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable fun
      DatabaseSyncSettings(wifiOnly: Boolean)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable private fun
      IncludedMediaTypes(permanentFilters: Map&lt;MediaType, Boolean&gt;)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable private fun
      MediaTypePermanentFilter(mediaType: MediaType, isActive: Boolean)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable private fun
      SettingsScreen(state: State&lt;SettingsState&gt;)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable private fun
      UserDefinedFilter(whichBox: Int, checkboxSetting: CheckboxSetting)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@Composable private fun
      UserDefinedFilters(checkBoxSettings: CheckboxSettings)
    </ID>
    <ID>FunctionNaming:SettingsFragment.kt$SettingsFragment$@OptIn(ExperimentalMaterial3Api::class)
      @Composable private fun CheckboxNameChangeDialog(whichBox: Int, initialName: String)
    </ID>
    <ID>Indentation:GetSettingsFragmentImpl.kt$GetSettingsFragmentImpl$</ID>
    <ID>Indentation:SettingsFragment.kt$SettingsFragment$</ID>
    <ID>Indentation:SettingsViewModel.kt$SettingsState$</ID>
    <ID>Indentation:SettingsViewModel.kt$SettingsViewModel$</ID>
    <ID>MagicNumber:SettingsFragment.kt$SettingsFragment$3</ID>
    <ID>MaxLineLength:SettingsViewModel.kt$SettingsViewModel$getCheckboxSettings().collect {
      newCheckboxSettings -&gt; _state.update { it.copy(checkboxSettings = newCheckboxSettings) } }
    </ID>
    <ID>MaxLineLength:SettingsViewModel.kt$SettingsViewModel$getPermanentFilterSettings().collect {
      newPermFilters -&gt; _state.update { it.copy(permanentFilters = newPermFilters) } }
    </ID>
    <ID>MaximumLineLength:SettingsViewModel.kt$SettingsViewModel$</ID>
    <ID>Wrapping:SettingsFragment.kt$SettingsFragment$(</ID>
    <ID>Wrapping:SettingsFragment.kt$SettingsFragment$(text = checkboxSetting.name ?: "Error getting
      name", modifier = Modifier.padding(8.dp))
    </ID>
    <ID>Wrapping:SettingsViewModel.kt$SettingsViewModel$it.copy(checkboxSettings =
      newCheckboxSettings)
    </ID>
  </CurrentIssues>
</SmellBaseline>
