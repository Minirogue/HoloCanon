<?xml version="1.0" ?>
<SmellBaseline>
    <ManuallySuppressedIssues></ManuallySuppressedIssues>
    <CurrentIssues>
        <ID>ArgumentListWrapping:MediaListViewModel.kt$MediaListViewModel$(Dispatchers.Default)</ID>
        <ID>ArgumentListWrapping:MediaListViewModel.kt$MediaListViewModel$(checkboxSettings =
            checkboxSettings)
        </ID>
        <ID>ArgumentListWrapping:MediaListViewModel.kt$MediaListViewModel$(isNetworkAllowed =
            networkAllowed)
        </ID>
        <ID>Indentation:MediaListFragment.kt$MediaListFragment$</ID>
        <ID>Indentation:MediaListViewModel.kt$MediaListState$</ID>
        <ID>Indentation:MediaListViewModel.kt$MediaListViewModel$</ID>
        <ID>MaxLineLength:MediaListViewModel.kt$MediaListViewModel$getCheckboxSettings().collect {
            checkboxSettings -&gt; _state.update { it.copy(checkboxSettings = checkboxSettings) } }
        </ID>
        <ID>MaxLineLength:MediaListViewModel.kt$MediaListViewModel$isNetworkAllowed().collect {
            networkAllowed -&gt; _state.update { it.copy(isNetworkAllowed = networkAllowed) } }
        </ID>
        <ID>MaxLineLength:MediaListViewModel.kt$MediaListViewModel$private suspend</ID>
        <ID>MaximumLineLength:MediaListViewModel.kt$MediaListViewModel$</ID>
        <ID>
            MultiLineIfElse:SWMListAdapter.kt$SWMListAdapter$networkCachePolicy(CachePolicy.DISABLED)
        </ID>
        <ID>NoConsecutiveBlankLines:MediaListModule.kt$</ID>
        <ID>UseCheckOrError:FragmentViewBindingDelegate.kt$FragmentViewBindingDelegate$throw
            IllegalStateException( "Binding is only available when the View is available (between
            onCreateView and onDestroyView)." )
        </ID>
        <ID>Wrapping:MediaListFragment.kt$MediaListFragment$(</ID>
        <ID>Wrapping:MediaListFragment.kt$MediaListFragment$(object : MenuProvider { override fun
            onCreateMenu(menu: Menu, menuInflater: MenuInflater) {
            menuInflater.inflate(R.menu.media_list_menu, menu) } override fun
            onMenuItemSelected(menuItem: MenuItem): Boolean { return when (menuItem.itemId) {
            R.id.sort_by_date_menu_item -&gt; { mediaListViewModel.setSort(SortStyle.SORT_DATE) true
            } R.id.sort_by_timeline_menu_item -&gt; {
            mediaListViewModel.setSort(SortStyle.SORT_TIMELINE) true } R.id.sort_by_title_menu_item
            -&gt; { mediaListViewModel.setSort(SortStyle.SORT_TITLE) true } else -&gt; false } } },
            viewLifecycleOwner, Lifecycle.State.RESUMED)
        </ID>
    </CurrentIssues>
</SmellBaseline>
